{"version":3,"sources":["components/FilterList/FilterList.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","onSelectTodoId","selectTodoId","className","map","todo","id","completed","title","cn","type","onClick","TodoFilter","query","onSelectQuery","filter","onSelectFilter","value","onChange","event","target","ALL","ACTIVE","COMPLITED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","reset","useState","user","setUser","isLoading","setIsLoading","userId","useEffect","getUser","href","email","name","App","setTodos","setQuery","setFilter","setSelectTodoId","selectTodos","filteredList","slice","normaliseQuery","trim","toLocaleLowerCase","includes","getFilteredTodos","selectTodo","find","finally","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b35ff271.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLITED = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onSelectTodoId?: (userId: number) => void;\n  selectTodoId: number | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectTodoId = () => { },\n  selectTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => {\n        const {\n          id,\n          completed,\n          title,\n        } = todo;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelectTodoId(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn('far', {\n                      'fa-eye': id !== selectTodoId,\n                      'fa-eye-slash': id === selectTodoId,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { FilterType } from '../FilterList/FilterList';\n\ntype Props = {\n  query: string;\n  onSelectQuery: (value: string) => void;\n  filter: FilterType;\n  onSelectFilter: (value: FilterType) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onSelectQuery,\n  filter,\n  onSelectFilter,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filter}\n          onChange={(event) => onSelectFilter(event.target.value as FilterType)}\n        >\n          <option value={FilterType.ALL}>All</option>\n          <option value={FilterType.ACTIVE}>Active</option>\n          <option value={FilterType.COMPLITED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onSelectQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onSelectQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  reset: (todoId: null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, reset }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = todo;\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(userId)\n      .then(setUser)\n      .then(() => setIsLoading(false));\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => reset(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './components/FilterList/FilterList';\n\nfunction getFilteredTodos(\n  todos: Todo[],\n  query: string,\n  filter: FilterType,\n) {\n  let filteredList = todos.slice();\n  const normaliseQuery = query.trim().toLocaleLowerCase();\n\n  if (query) {\n    filteredList = todos.filter((todo: Todo) => todo.title.toLocaleLowerCase().includes(normaliseQuery));\n  }\n\n  if (filter) {\n    switch (filter) {\n      case FilterType.COMPLITED:\n        filteredList = filteredList.filter(todo => todo.completed);\n        break;\n\n      case FilterType.ACTIVE:\n        filteredList = filteredList.filter(todo => !todo.completed);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return filteredList;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [query, setQuery] = useState<string>('');\n  const [filter, setFilter] = useState<FilterType>(FilterType.ALL);\n  const [selectTodoId, setSelectTodoId] = useState<number | null>(null);\n\n  const selectTodos = getFilteredTodos(todos, query, filter);\n  const selectTodo = selectTodos.find(todo => todo.id === selectTodoId);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onSelectQuery={setQuery}\n                filter={filter}\n                onSelectFilter={setFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={selectTodos}\n                  onSelectTodoId={setSelectTodoId}\n                  selectTodoId={selectTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectTodo && (\n        <TodoModal\n          todo={selectTodo}\n          reset={(todoId: null) => setSelectTodoId(todoId)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}